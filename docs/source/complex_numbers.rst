.. _complex_numbers-doc:

الأعداد المركبة
==========

الأعداد المركبة هي أعداد يمكن التعبير عنها بالشكل :math:`a + bj`، حيث a و b أعداد حقيقية،
و *j* هي الوحدة التخيلية التي تحقق المعادلة :math:`j^2 = -1`. تظهر الأعداد المركبة بشكل متكرر في الرياضيات والهندسة، خاصة في مواضيع مثل معالجة الإشارات. وقد تعامل العديد من المستخدمين والمكتبات (مثل TorchAudio)
مع الأعداد المركبة عن طريق تمثيل البيانات في مصفوفات ذات نقطة عائمة الشكل :math:`(..., 2)` حيث يحتوي البعد الأخير
على القيم الحقيقية والتخيلية.

توفر المصفوفات ذات الأنواع المعقدة تجربة استخدام أكثر طبيعية عند العمل مع الأعداد المركبة. ومن المرجح أن تكون العمليات على
المصفوفات المعقدة (مثل :func:`torch.mv`، :func:`torch.matmul`) أسرع وأكثر كفاءة في الذاكرة
من العمليات على المصفوفات ذات النقطة العائمة التي تحاكيها. وتكون العمليات التي تتضمن أعدادًا مركبة في PyTorch مُحسَّنة
لاستخدام تعليمات التجميع المتجهة والنوى المتخصصة (مثل LAPACK، cuBlas).

.. note::
     تدعم العمليات الطيفية في وحدة `torch.fft <https://pytorch.org/docs/stable/fft.html#torch-fft>`_
     المصفوفات المعقدة الأصلية.

.. warning::
     المصفوفات المعقدة هي ميزة تجريبية وقد تتغير.

إنشاء المصفوفات المعقدة
---------------

ندعم نوعين معقدين: `torch.cfloat` و`torch.cdouble`

::

     >>> x = torch.randn(2,2, dtype=torch.cfloat)
     >>> x
     tensor([[-0.4621-0.0303j, -0.2438-0.5874j],
          [ 0.7706+0.1421j,  1.2110+0.1918j]])

.. note::

     نوع البيانات الافتراضي للمصفوفات المعقدة يتحدد بواسطة نوع بيانات النقطة العائمة الافتراضي.
     إذا كان نوع بيانات النقطة العائمة الافتراضي هو `torch.float64`، فيفترض أن يكون نوع بيانات الأعداد المركبة
     هو `torch.complex128`، أما إذا كان نوع بيانات النقطة العائمة الافتراضي هو `torch.float32`، فيفترض أن يكون نوع بيانات الأعداد المركبة
     هو `torch.complex64`.

جميع الدوال البانية باستثناء :func:`torch.linspace`، و:func:`torch.logspace`، و:func:`torch.arange` مدعومة للمصفوفات المعقدة.

الانتقال من التمثيل القديم
---------------

يمكن للمستخدمين الذين عملوا حاليًا على التحايل على عدم وجود مصفوفات معقدة باستخدام مصفوفات حقيقية الشكل :math:`(..., 2)`
التحويل بسهولة إلى استخدام المصفوفات المعقدة في أكوادهم باستخدام :func:`torch.view_as_complex`
و:func:`torch.view_as_real`. لاحظ أن هذه الدوال لا تقوم بأي نسخة وتُعيد عرض المصفوفة المدخلة.

::

     >>> x = torch.randn(3, 2)
     >>> x
     tensor([[ 0.6125, -0.1681],
          [-0.3773,  1.3487],
          [-0.0861, -0.7981]])
     >>> y = torch.view_as_complex(x)
     >>> y
     tensor([ 0.6125-0.1681j, -0.3773+1.3487j, -0.0861-0.7981j])
     >>> torch.view_as_real(y)
     tensor([[ 0.6125, -0.1681],
          [-0.3773,  1.3487],
          [-0.0861, -0.7981]])

الوصول إلى الجزء الحقيقي والتخيلي
-----------------------

يمكن الوصول إلى القيم الحقيقية والتخيلية للمصفوفة المعقدة باستخدام :attr:`real` و
:attr:`imag`.

.. note::
     لا يقوم الوصول إلى الخصائص `real` و`imag` بتخصيص أي ذاكرة، وستؤدي التحديثات في الموقع على المصفوفات
     `real` و`imag` إلى تحديث المصفوفة المعقدة الأصلية. أيضًا، المصفوفات
     `real` و`imag` المعادة غير متجاورتين.

::

     >>> y.real
     tensor([ 0.6125, -0.3773, -0.0861])
     >>> y.imag
     tensor([-0.1681,  1.3487, -0.7981])

     >>> y.real.mul_(2)
     tensor([ 1.2250, -0.7546, -0.1722])
     >>> y
     tensor([ 1.2250-0.1681j, -0.7546+1.3487j, -0.1722-0.7981j])
     >>> y.real.stride()
     (2,)

الزاوية والقيمة المطلقة
-------------

يمكن حساب زاوية وقيمة المصفوفة المعقدة باستخدام :func:`torch.angle` و
:func:`torch.abs`.

::

     >>> x1=torch.tensor([3j, 4+4j])
     >>> x1.abs()
     tensor([3.0000, 5.6569])
     >>> x1.angle()
     tensor([1.5708, 0.7854])

الجبر الخطي
--------

يدعم العديد من عمليات الجبر الخطي، مثل :func:`torch.matmul`، و:func:`torch.linalg.svd`، و:func:`torch.linalg.solve`، الأعداد المركبة.
إذا كنت ترغب في طلب عملية لا ندعمها حاليًا، يرجى `البحث <https://github.com/pytorch/pytorch/issues?q=is%3Aissue+is%3Aopen+complex>`_
عن إصدار موجود بالفعل، وإن لم يكن، `قم بإنشاء إصدار جديد <https://github.com/pytorch/pytorch/issues/new/choose>`_.


التهيئة
----

يمكن تهيئة المصفوفات المعقدة، مما يسمح بتخزين البيانات كقيم معقدة.

::

     >>> torch.save(y, 'complex_tensor.pt')
     >>> torch.load('complex_tensor.pt')
     tensor([ 0.6125-0.1681j, -0.3773+1.3487j, -0.0861-0.7981j])


Autograd
--------

تدعم PyTorch Autograd للمصفوفات المعقدة. المشتق المحسوب هو مشتق ويرسترين التآلفي،
والذي يمثل سالب اتجاه أقصى انحدار المستخدم في خوارزمية الانحدار التدريجي. وبالتالي،
يمكن تنفيذ جميع المحسنات الموجودة للعمل خارج الصندوق مع المعلمات المعقدة. لمزيد من التفاصيل،
راجع الملاحظة :ref:`complex_autograd-doc`.


المحسنات
------

من الناحية الدلالية، نُعرِّف الانتقال خلال محسن PyTorch بمعلمات معقدة على أنه مكافئ للانتقال خلال نفس المحسن على
:func:`torch.view_as_real` المكافئ للمعلمات المعقدة. وبشكل أكثر تحديدًا:

::

     >>> params = [torch.rand(2, 3, dtype=torch.complex64) for _ in range(5)]
     >>> real_params = [torch.view_as_real(p) for p in params]

     >>> complex_optim = torch.optim.AdamW(params)
     >>> real_optim = torch.optim.AdamW(real_params)


سيحسب `real_optim` و`complex_optim` نفس التحديثات على المعلمات، على الرغم من أنه قد تكون هناك اختلافات رقمية طفيفة
بين المحسنين، مماثلة للاختلافات الرقمية بين محسنات foreach مقابل forloop والمحسنات الافتراضية مقابل الافتراضية. لمزيد من التفاصيل، راجع https://pytorch.org/docs/stable/notes/numerical_accuracy.html.

وعلى وجه التحديد، في حين يمكنك اعتبار تعامل محسناتنا مع المصفوفات المعقدة مماثلًا للتحسين على أجزائها `p.real` و`p.imag` بشكل منفصل، فإن تفاصيل التنفيذ ليست كذلك بالضبط. لاحظ أن المكافئ :func:`torch.view_as_real` سيحول مصفوفة معقدة إلى مصفوفة حقيقية الشكل :math:`(..., 2)`،
في حين أن تقسيم مصفوفة معقدة إلى مصفوفتين هما مصفوفتين من الحجم :math:`(...)`. لا يؤثر هذا التمييز على
المحسنات النقطية (مثل AdamW) ولكنه سيتسبب في حدوث اختلاف طفيف في المحسنات التي تقوم بتخفيضات عالمية (مثل LBFGS).
لا توجد لدينا حاليًا محسنات تقوم بتخفيضات لكل مصفوفة، وبالتالي لا نحدد هذا السلوك بعد. قم بإنشاء إصدار إذا كان لديك حالة استخدام تتطلب تحديد هذا السلوك بدقة.


لا ندعم الأنظمة الفرعية التالية بالكامل:

* التكميم

* JIT

* المصفوفات المتناثرة

* موزعة

إذا كان أي من هذه الأنظمة الفرعية مفيدًا لحالتك الاستخدام، يرجى `البحث <https://github.com/pytorch/pytorch/issues?q=is%3Aissue+is%3Aopen+complex>`_
عن إصدار موجود بالفعل، وإن لم يكن، `قم بإنشاء إصدار جديد <https://github.com/pytorch/pytorch/issues/new/choose>`_.