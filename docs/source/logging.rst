.. role:: hidden
    :class: hidden-section

torch._logging
==============

يحتوي PyTorch على نظام تسجيل قابل للتكوين، حيث يمكن تعيين مستويات تسجيل مختلفة لمكونات مختلفة. على سبيل المثال، يمكن تعطيل رسائل سجل أحد المكونات تمامًا، في حين يمكن تعيين رسائل سجل مكون آخر على أقصى مستوى من التفصيل.

.. warning:: هذه الميزة هي إصدار تجريبي Beta وقد تخضع لتغييرات غير متوافقة مع الإصدارات السابقة في المستقبل.

.. warning:: لم يتم توسيع هذه الميزة بعد للتحكم في رسائل سجل جميع المكونات في PyTorch.

هناك طريقتان لتكوين نظام التسجيل: من خلال متغير البيئة ``TORCH_LOGS`` أو واجهة برمجة التطبيقات (API) الخاصة بلغة بايثون torch._logging.set_logs.

.. automodule:: torch._logging
.. currentmodule:: torch._logging

.. autosummary::
    :toctree: generated
    :nosignatures:

    set_logs

متغير البيئة ``TORCH_LOGS`` هو قائمة مفصولة بفواصل تضم أزواجًا من ``[+-]<component>``، حيث ``<component>`` هو مكون محدد أدناه. سيؤدي البادئة ``+`` إلى تقليل مستوى السجل للمكون، وعرض المزيد من رسائل السجل في حين أن البادئة ``-`` ستزيد من مستوى السجل للمكون وعرض عدد أقل من رسائل السجل. الإعداد الافتراضي هو السلوك عندما لا يتم تحديد مكون في ``TORCH_LOGS``. بالإضافة إلى المكونات، هناك أيضًا القطع الأثرية. القطع الأثرية هي قطع محددة من معلومات التصحيح المرتبطة بمكون يتم عرضها أو عدم عرضها، لذلك فإن إضافة بادئة "``+``" أو "``-``" إلى قطعة أثرية سيكون بلا فائدة. نظرًا لارتباطها بمكون، فإن تمكين هذا المكون سيمكن عادةً من تمكين تلك القطعة الأثرية، ما لم يتم تحديد القطعة الأثرية على أنها ``off_by_default``. يتم تحديد هذا الخيار في _registrations.py للقطع الأثرية التي تكون مزعجة جدًا بحيث لا يتم عرضها إلا عند تمكينها بشكل صريح.
يمكن تكوين المكونات والقطع الأثرية التالية من خلال متغير البيئة ``TORCH_LOGS`` (راجع torch._logging.set_logs لواجهة برمجة التطبيقات (API) بلغة بايثون):

المكونات:
        ``all``
            مكون خاص يقوم بتكوين مستوى السجل الافتراضي لجميع المكونات. الافتراضي: ``logging.WARN``

        ``dynamo``
            مستوى السجل لـ TorchDynamo component. الافتراضي: ``logging.WARN``

        ``aot``
            مستوى السجل لـ AOTAutograd component. الافتراضي: ``logging.WARN``

        ``inductor``
            مستوى السجل لـ TorchInductor component. الافتراضي: ``logging.WARN``

        ``your.custom.module``
            مستوى السجل لموديول غير مسجل عشوائي. قم بتوفير الاسم المؤهل بالكامل وسيتم تمكين الموديول. الافتراضي: ``logging.WARN``

القطع الأثرية:
        ``bytecode``
            ما إذا كان سيتم إصدار البايت كود Bytecode الأصلي والمولد من TorchDynamo.
            الافتراضي: ``False``

        ``aot_graphs``
            ما إذا كان سيتم إصدار الرسوم البيانية التي تم إنشاؤها بواسطة AOTAutograd. الافتراضي: ``False``

        ``aot_joint_graph``
            ما إذا كان سيتم إصدار الرسم البياني للأمام والخلف المشترك الذي تم إنشاؤه بواسطة AOTAutograd. الافتراضي: ``False``

        ``compiled_autograd``
            ما إذا كان سيتم إصدار سجلات من compiled_autograd. الافتراضي: ``False``

        ``ddp_graphs``
            ما إذا كان سيتم إصدار الرسوم البيانية التي تم إنشاؤها بواسطة DDPOptimizer. الافتراضي: ``False``

        ``graph``
            ما إذا كان سيتم إصدار الرسم البياني الذي تم التقاطه بواسطة TorchDynamo بتنسيق جدول.
            الافتراضي: ``False``

        ``graph_code``
            ما إذا كان سيتم إصدار كود المصدر بلغة بايثون Python للرسم البياني الذي تم التقاطه بواسطة TorchDynamo.
            الافتراضي: ``False``

        ``graph_breaks``
            ما إذا كان سيتم إصدار رسالة عند مواجهة كسر رسم بياني فريد أثناء تتبع TorchDynamo. الافتراضي: ``False``

        ``guards``
            ما إذا كان سيتم إصدار الحرس الذي تم إنشاؤه بواسطة TorchDynamo لكل دالة مجمعة. الافتراضي: ``False``

        ``recompiles``
            ما إذا كان سيتم إصدار سبب فشل الحرس ورسالة كل مرة تقوم فيها TorchDynamo بإعادة تجميع دالة. الافتراضي: ``False``

        ``output_code``
            ما إذا كان سيتم إصدار كود الإخراج Output code لـ TorchInductor. الافتراضي: ``False``

        ``schedule``
            ما إذا كان سيتم إصدار الجدول الزمني لـ TorchInductor. الافتراضي: ``False``

أمثلة:
    سيقوم ``TORCH_LOGS="+dynamo,aot"`` بتعيين مستوى السجل لـ TorchDynamo إلى ``logging.DEBUG`` وAOT إلى ``logging.INFO``

    سيقوم ``TORCH_LOGS="-dynamo,+inductor"`` بتعيين مستوى السجل لـ TorchDynamo إلى ``logging.ERROR`` وTorchInductor إلى ``logging.DEBUG``

    سيقوم ``TORCH_LOGS="aot_graphs"`` بتمكين قطعة الأثرية ``aot_graphs``

    سيقوم ``TORCH_LOGS="+dynamo,schedule"`` بتمكين تعيين مستوى السجل لـ TorchDynamo إلى ``logging.DEBUG`` وتمكين قطعة الأثرية ``schedule``

    سيقوم ``TORCH_LOGS="+some.random.module,schedule"`` بتعيين مستوى السجل لـ some.random.module إلى ``logging.DEBUG`` وتمكين قطعة الأثرية ``schedule``