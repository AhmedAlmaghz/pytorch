torch.hub
==========

Pytorch Hub هو مستودع نماذج مُدربة مسبقًا مصمم لتسهيل إمكانية إعادة إنتاج الأبحاث.

نشر النماذج
-------

يدعم Pytorch Hub نشر النماذج المُدربة مسبقًا (تعريفات النماذج والأوزان المُدربة مسبقًا)
في مستودع GitHub عن طريق إضافة ملف ``hubconf.py`` بسيط؛

يمكن أن يحتوي ملف ``hubconf.py`` على عدة نقاط دخول. تُعرف كل نقطة دخول على أنها دالة Python
(على سبيل المثال: نموذج مُدرب مسبقًا تريد نشره).

::

    def entrypoint_name(*args, **kwargs):
        # args & kwargs اختيارية، للنماذج التي تأخذ وسائط/حجج الكلمات الأساسية الموضعية.
        ...

كيف يمكن تنفيذ نقطة الدخول؟
^^^^^^^^^^^^^^^^^^^^^
فيما يلي مقتطف من التعليمات البرمجية يحدد نقطة دخول لنموذج "resnet18" إذا قمنا بتوسيع
التنفيذ في "pytorch/vision/hubconf.py".
في معظم الحالات، يكفي استيراد الدالة الصحيحة في ملف ``hubconf.py``. هنا
نحن نريد فقط استخدام الإصدار الموسع كمثال لتوضيح كيفية عمله.
يمكنك الاطلاع على النص البرمجي الكامل في
`مستودع pytorch/vision <https://github.com/pytorch/vision/blob/master/hubconf.py>`_

::

    dependencies = ['torch']
    from torchvision.models.resnet import resnet18 as _resnet18

    # resnet18 هو اسم نقطة الدخول
    def resnet18(pretrained=False, **kwargs):
        """ # تظهر هذه السلسلة التوثيقية في hub.help()
        نموذج Resnet18
        pretrained (bool): وسائط الكلمات الأساسية، تحميل الأوزان المُدربة مسبقًا في النموذج
        """
        # استدعاء النموذج، وتحميل الأوزان المُدربة مسبقًا
        model = _resnet18(pretrained=pretrained, **kwargs)
        return model


- متغير ``dependencies`` هو **قائمة** بأسماء الحزم المطلوبة لتحميل النموذج. لاحظ أن هذا قد
  يختلف قليلاً عن التبعيات المطلوبة لتدريب النموذج.
- يتم تمرير وسائط ``args`` و ``kwargs`` إلى الدالة القابلة للاستدعاء الفعلية.
- تعمل السلسلة التوثيقية للدالة كرسالة مساعدة. يوضح ما يفعله النموذج وما هي
وسائط/حجج المواضع والكلمات الأساسية المسموح بها. من المستحسن بشدة إضافة بعض الأمثلة هنا.
- يمكن لدالة نقطة الدخول إما أن تعيد نموذجًا (nn.module)، أو أدوات مساعدة لجعل سير عمل المستخدم أكثر سلاسة، على سبيل المثال، برامج التعرف على الكيانات المسماة.
- تعتبر الدالات القابلة للاستدعاء التي تحمل بادئة شرطة سفلية دالات مساعدة لن تظهر في :func:`torch.hub.list()`.
- يمكن تخزين الأوزان المُدربة مسبقًا إما محليًا في مستودع GitHub، أو تحميلها عن طريق
:func:`torch.hub.load_state_dict_from_url()`. إذا كان الحجم أقل من 2 جيجابايت، فيُنصح بإرفاقه بـ `إصدار المشروع <https://help.github.com/en/articles/distributing-large-binaries>`_
واستخدام عنوان URL من الإصدار.
في المثال أعلاه، فإن ``torchvision.models.resnet.resnet18`` يتعامل مع وسيط ``pretrained``، أو يمكنك وضع المنطق التالي في تعريف نقطة الدخول.

::

    if pretrained:
        # بالنسبة لنقطة التفتيش المحفوظة في مستودع GitHub المحلي، على سبيل المثال، <RELATIVE_PATH_TO_CHECKPOINT>=weights/save.pth
        dirname = os.path.dirname(__file__)
        checkpoint = os.path.join(dirname, <RELATIVE_PATH_TO_CHECKPOINT>)
        state_dict = torch.load(checkpoint)
        model.load_state_dict(state_dict)

        # بالنسبة لنقطة التفتيش المحفوظة في مكان آخر
        checkpoint = 'https://download.pytorch.org/models/resnet18-5c106cde.pth'
        model.load_state_dict(torch.hub.load_state_dict_from_url(checkpoint, progress=False))


ملاحظة مهمة
^^^^^^^^^^

- يجب أن تكون النماذج المنشورة على الأقل في فرع/وسم. لا يمكن أن يكون هذا الالتزام عشوائيًا.


تحميل النماذج من Hub
-----------------

يوفر Pytorch Hub واجهات برمجة تطبيقات (APIs) ملائمة لاستكشاف جميع النماذج المتاحة في Hub
من خلال :func:`torch.hub.list()`، وعرض السلاسل التوثيقية والأمثلة من خلال
:func:`torch.hub.help()`، وتحميل النماذج المُدربة مسبقًا باستخدام
:func:`torch.hub.load()`.


.. automodule:: torch.hub

.. autofunction:: list

.. autofunction:: help

.. autofunction:: load

.. autofunction:: download_url_to_file

.. autofunction:: load_state_dict_from_url

تشغيل نموذج محمل:
^^^^^^^^^^^^^^

لاحظ أن ``*args`` و ``**kwargs`` في :func:`torch.hub.load()` تُستخدم لتحميل
نموذج. بعد تحميل نموذج، كيف يمكنك معرفة ما يمكنك فعله بالنموذج؟
سير عمل مقترح هو

- ``dir(model)`` لمعرفة جميع الطرق المتاحة للنموذج.
- ``help(model.foo)`` للتحقق من الوسائط التي تأخذها طريقة ``model.foo`` لتشغيلها

لمساعدة المستخدمين على الاستكشاف دون الرجوع إلى الوثائق ذهابًا وإيابًا، نوصي بشدة بأن يجعل مالكو المستودعات رسائل مساعدة الدالة واضحة وموجزة. من المفيد أيضًا تضمين مثال عملي بسيط.

أين يتم حفظ النماذج التي تم تنزيلها؟
^^^^^^^^^^^^^^^^^^^^^^^^^

يتم استخدام المواقع بالترتيب التالي:

- استدعاء ``hub.set_dir(<PATH_TO_HUB_DIR>)``
- ``$TORCH_HOME/hub``، إذا تم تعيين متغير البيئة ``TORCH_HOME``.
- ``$XDG_CACHE_HOME/torch/hub``، إذا تم تعيين متغير البيئة ``XDG_CACHE_HOME``.
- ``~/.cache/torch/hub``

.. autofunction:: get_dir

.. autofunction:: set_dir

منطق التخزين المؤقت
^^^^^^^^^^^^^

بشكل افتراضي، لا نقوم بتنظيف الملفات بعد تحميلها. يستخدم Hub ذاكرة التخزين المؤقت بشكل افتراضي إذا كان موجودًا بالفعل في
الدليل الذي تم إرجاعه بواسطة :func:`~torch.hub.get_dir()`.

يمكن للمستخدمين فرض إعادة التحميل عن طريق استدعاء ``hub.load(..., force_reload=True)``. سيؤدي هذا إلى حذف
مجلد GitHub الموجود والأوزان المحملة، وإعادة التنزيل من البداية. هذا مفيد
عندما يتم نشر التحديثات إلى نفس الفرع، ويمكن للمستخدمين مواكبة أحدث إصدار.


القيود المعروفة:
^^^^^^^^^^^
يعمل Torch hub عن طريق استيراد الحزمة كما لو تم تثبيتها. هناك بعض التأثيرات الجانبية
التي تم تقديمها عن طريق الاستيراد في Python. على سبيل المثال، يمكنك رؤية عناصر جديدة في ذاكرة التخزين المؤقت لـ Python
``sys.modules`` و ``sys.path_importer_cache`` وهو سلوك Python عادي.
هذا يعني أيضًا أنه قد تواجهك أخطاء استيراد عند استيراد نماذج مختلفة
من مستودعات مختلفة، إذا كان لدى المستودعات نفس أسماء الحزم الفرعية (عادةً، حزمة
"model" فرعية). حل بديل لأخطاء الاستيراد هذه هو
إزالة الحزمة الفرعية المخالفة من قاموس ``sys.modules``؛ يمكن العثور على مزيد من التفاصيل في
`قضية GitHub هذه
<https://github.com/pytorch/hub/issues/243#issuecomment-942403391>`_.

هناك حد معروف يستحق الذكر هنا: لا **يمكن** للمستخدمين تحميل فرعين مختلفين
من نفس المستودع في **نفس عملية Python**. هذا يشبه تثبيت حزمتين بنفس الاسم في Python، وهو أمر غير جيد. قد تنضم ذاكرة التخزين المؤقت إلى الحفل وتفاجئك إذا
كنت تحاول ذلك بالفعل. بالطبع من الجيد تحميلها في عمليات منفصلة.