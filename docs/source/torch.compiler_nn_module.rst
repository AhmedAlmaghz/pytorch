دعم PyTorch 2.0 NNModule
============================

**المؤلف**: `Will Constable <https://github.com/wconstab>`_

توجد لدى ``torch.compile`` معالجة خاصة لـ ``torch.nn.Module``، حيث يتم تتبعها بشكل مختلف عن تتبع
فئات بايثون الاعتباطية، وذلك بهدف إنتاج كود أسرع من خلال وضع افتراضات حول البنية.

تصف هذه الوثيقة بعض المقايضات أو الحالات الحدية التي تنشأ بسبب هذا التخصص.

دعم خطافات NNModule
----------------------
في السابق، لم يكن لدى ``torch.compile`` أي دعم للخطافات على ``nn.Modules``، وإذا تم تسجيل الخطافات
فسيتم ببساطة تجاهلها في البرنامج المترجم. في الواقع، لا يستخدم العديد من المستخدمين خطافات ``nn.Module`` على الإطلاق، أو يستخدمونها فقط لتدفقات التصحيح، ولكن هناك حالات استخدام صالحة
لتكوين خطافات ``nn.Module`` مع ``torch.compile``.

تشمل الخطافات التي يتم تنسيقها عبر تنفيذ ``nn.Module.__call__`` ما يلي: ``_forward_pre_hooks``،
و ``forward_hooks``، و ``_backward_pre_hooks``، و ``_backward_hooks``، ويشار إليها باسم 'خطافات الاستدعاء'.
هذه الخطافات مدعومة جزئيًا بواسطة ``torch.compile`` مع القيود الموضحة أدناه.

تتضمن فئة أخرى من الخطافات ما يلي: ``_state_dict_hooks`` ومتغيراته ``pre`` و ``load_``، وهي لا تزال
غير مدعومة بواسطة ``torch.compile``.

استخدام قيود خطافات ``nn.Module.__call__``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
بشكل افتراضي، سيقوم ``torch.compile`` بتتبع محتويات ``nn.Module.__call__``، مما يعني أنه سيصادف
وسينفذ الخطافات الأمامية/ما قبل الأمامية. إذا قمت بتثبيت الخطافات قبل استدعاء ``torch.compile`` ثم لم تقم بإزالة
أو تغيير الخطافات لاحقًا، فسيتم دعم حالة الاستخدام الخاصة بك بشكل افتراضي.

الخطافات الخلفية/ما قبل الخلفية مدعومة أيضًا بشكل عام، مع تحذيرات مماثلة: حاليًا، تحدث انقطاعات الرسم البياني في دينامو
عند الوصول إلى القواميس ``backward_hooks``، والتي يمكن تجنبها على الأرجح ببعض العمل. تؤثر انقطاعات الرسم البياني أيضًا على
توقيت تشغيل الخطافات الخلفية، نظرًا لأن أجزاء الرسم البياني يتم تشغيلها كوظائف autograd والتي تنتج جميع تدرجاتها
في نفس الوقت. بافتراض أنه كان من الممكن ألا ينقطع الرسم البياني في دينامو بسبب وجود خطافات خلفية، فلا نزال نتوقع
أن يتم تشغيل جميع الخطافات الخلفية لسلسلة من الوحدات النمطية معًا بعد تشغيل الخلفي للرسم البياني المترجم بالكامل.

**خطافات على الوحدات النمطية المسموح بها**
يعامل ``torch.compile`` الوحدات النمطية الشائعة مثل ``torch.conv``، وكذلك الوحدات النمطية التي يصعب تتبعها، بشكل خاص
من خلال السماح باستدعائها بشكل غامض في رسم دينامو البياني بدلاً من تتبعها بواسطة دينامو. بالنسبة لهذه الوحدات النمطية، تؤدي الخطافات
حاليًا إلى انقطاع في الرسم البياني بحيث يتم تشغيل الوحدات النمطية المتأثرة خارج دينامو. اعتمادًا على النموذج، قد
يؤدي ذلك إلى حدوث تراجع كبير في الأداء، وهناك حاجة إلى مزيد من العمل لتحسين هذا الدعم.

**skip_nnmodule_hook_guards**
بشكل افتراضي، يتم تعيين ``torch._dynamo.config.skip_nnmodule_hook_guards`` إلى True، مما يعني أنه لن يتم تثبيت أي حرس
على كل قاموس خطاف وحدة نمطية، مما يحسن وقت التشغيل عن طريق تقليل وقت تنفيذ الحرس، على حساب عدم ملاحظة
إذا تم تغيير أي قاموس خطاف بعد الترجمة.

إذا كنت تريد القدرة على إزالة الخطافات أو تعديلها بعد الترجمة ولتتمكن ``torch.compile`` من الاستجابة بشكل مناسب
(عن طريق إعادة الترجمة)، فيجب عليك تعيين ``skip_nnmodule_hook_guards=False`` وتوقع عقوبة وقت التشغيل للحرس
المضافة.

TODO: تأكيد ما إذا كانت الخطافات الخلفية/ما قبل الخلفية تعمل أم لا وتوثيقها وفقًا لذلك

خطافات القاموس
~~~~~~~~~~~~~~~~
لم يتم بعد دعم خطافات قاموس الحالة في ``torch.compile``.


TODO: warn_once إذا تم انقطاع الرسم البياني على الخطافات. warn_once للإشارة إلى هذه الوثيقة إذا كانت الخطافات موجودة.